#!/usr/bin/env bash

if [ "$(id -u)" -ne 0 ]; then
	echo "ERROR: Necesitar ser root."
	exit 1
fi

rm /tmp/diskenvtemp.sh* 2> /dev/null
rm /tmp/diskmenutemp.sh* 2> /dev/null
rm /tmp/rootpartmenutemp.sh* 2> /dev/null
rm /tmp/swapppartmenutemp.sh* 2> /dev/null
rm /tmp/localestemp.sh* 2> /dev/null
rm /tmp/hosttemp.sh* 2> /dev/null
rm /tmp/graphicaltemp.sh* 2> /dev/null
rm /tmp/driverstemp.sh* 2> /dev/null

DISKMENUTEMP=/tmp/diskmenutemp.sh.$$	
DISKENVTEMP=/tmp/diskenvtemp.sh.$$	
ROOTPARTMENUTEMP=/tmp/rootpartmenutemp.sh.$$	
SWAPPARTMENUTEMP=/tmp/swapppartmenutemp.sh.$$	
LOCALESTEMP=/tmp/localestemp.sh.$$
HOSTTEMP=/tmp/hosttemp.sh.$$
GRAPHICALTEMP=/tmp/graphicaltemp.sh.$$
DRIVERSTEMP=/tmp/driverstemp.sh.$$

function cleanup { rm $DISKENVTEMP; rm $DISKMENUTEMP; rm $ROOTPARTMENUTEMP; 
	rm $SWAPPARTMENUTEMP; rm $LOCALESTEMP; $HOSTTEMP; $GRAPHICALTEMP; $DRIVERSTEMP; exit; }

trap cleanup; SIGHUP SIGINT SIGTERM

DISKENVIRONMENT=""
DISK=""
ROOTPART=""
EFIPART=""
SWAPPART=""
SUDOUSER=""

function corelive { clear; cover; sleep 1s; verify; diskenv; }
function corechroot { configurator; hostnamer; localer; newuser; swapper; xanmod; graphical; drivers; aur; ohmyzsh; optimizations; software; finisher; }

function cover {
	echo '          					    ``...`                                                    '
	echo '                                      `..:/+++/--/shdmmmmmhy+:.`                                              '
	echo '                                  `-+ydmMMMMMMMMMMMMMMMMMMMMMMNds:`                                           '
	echo '                               `/ymMMMMMNmNMMMMMMMMMMMMNhooyNNMMMMmy:`                                        '
	echo '                             -yNMMMMMNy//hMMMMMMMNyymMMMMNdhm-:sNMMMMd/                                       '
	echo '                           .yMMMMMMNo.`oMMMMMMMMod: .ydMMMMMM+.``omMMMMh.                                     '
	echo '                         `oNMMMMMMo` -MMMMMMMMMmdmMNNmyNMMMMMMMNy/`oNMMMN/                                    '
	echo '                        /mMMMMMMs.  oMMMMMMMNo.  :Mo:hMMs:mMMMMNMMmyhMMMMMo-`                                  '
	echo '                      -hMMMMMMy. .sdMMMMMMMh.o/-/sy:+NMNhys+/:-......--:/+oshddyo/-`                           '
	echo '                    `sNMMMMMh: ` +MMMMMMMMo` .dshs yMh.` `.-..               ``-/oydds/.                       '
	echo '                   /mMMMMMm/`  odMMMMMMMm- s::ydomsMy``+o+:-:/++/`                 `./sdds/.                   '
	echo '                 `yMMMMMMs`   -mMMMMMMMh.  +y+/:-hMs `h-       `:y.                    `.+hmh+.               '
	echo '                -dMMMMMm:  `.:NMMMMMMMs` ./hyso/dMo  :y   //:/-  :y                        ./hmh/`            '
	echo '               :mMMMMMd.   `+NMMMMMMN+ .-ohyyhhhMo   `h.  :: `y   N                           .odmo.           '
	echo '              +NMMMMMy`  `./NMMMMMMN/   `+/-:/yMo     .o:.`.-+-  -d                             `/dNs.        '
	echo '             oMMMMMMs`  o-+MMMMMMMN:`::/oo-  +Ms        -----`  -y-                               `oNm/       '
	echo '           `sMMMMMMo   +yoNMMMMMMm-`o/`-oyh`+Ms          `````-oo`                                  -dMy`     '
	echo '          `yMMMMMN/    /yNMMMMMMd. -h--h+-ysMy          `-////:`                                     `dMh`    '
	echo '          yMMMMMN:  -+:oMMMMMMMd````y++o++sNh`                                                        `mMy    '
	echo '        /MMMMMy`   /+ooMMMMMMh`  ./+N:-+oNm`                                                            mMd   '
	echo '       .NMMMMs  `+ +++MMMMMMy   so++s++oNNs+oooo/-       `/oysyyso/.                                    yMM   '
	echo '       dMMMM+    :s `mMMMMMs `o +++o.-:mN.     `-o-     -h+-`   `-/sh+                                  yMM   '
	echo '      /MMMM+  -/o msoMMMMMo   :y `-s-`dN-                            `                                  hMN    '
	echo '      dMMM+   +oooy:mMMMMo ./o`do:+y/yM/                  `:/`                                         `NMh    '
	echo '     /MMMs  --:+s+osMMMM+  :sy/d//+hNM+            `/   .  `:y                                         sMM:    '
	echo '     mMMd` .mss+`hoyMMM+  `./ss++oohMo             .+  `y+/:+:                                        :MMy     '
	echo '    /MMN. o+mhym/yyNMMs  syo+./y. +Ny               -:::. ``                                         :NMd`     '
	echo '    dMM/`-ysoshh.`+MMm``-yhhdohysyMM:                                                               /NMd.      '
	echo '   :MMy.-sd:oy+y.`dMM/ :od+dhs./oNmmNh/.                                                          `oMMs`      '
	echo '   yMN.-/oy.+yys-hMMd -hy:yy+o `dm.`/ymdyysooo+///::--.......................--::////////+++++oooshNmo   	    '
	echo '  `MMy/+yyosy/-/dMMM/:/ss-oys/`dN-    `.--:://++ooosssyyyyyhyyyyhhhhhhhyyyhyyyssoo++++++///////::::-`         '
	echo '  +Mm`.+dy+sy.-mmNMm`.oys/yyo+hN:                                                                             '
	echo '  yMo/m+.`.-o/Nd-MMo+hho:oh``yM/                                                                               '
	echo '  hMd+ysy+:/yMy`:Mm :+ysoo+ yM/                                                                                '
	echo '  yM/h+-h``hMo  +My+d:`- :syM+                                                                                '
	echo '  oMds+ms+Nm-   +Mm/yyd//:hM/                                                                                  '
	echo '  -Mh  :dNs`    /Mod+:h``dN:                                                                                  	'
	echo '   oNdmms.      -Mmhody/mm-                                                                                    '
	echo '    .--`         mN. -yMy.                                                                                     '
	echo '                  /Nhsmd/                                                                                       '
	echo '                  -/+-`                     '
	echo '.oPYo. .oPYo. .pPYo.   .oPYo.                       o   o                 .oPYo.   o              8  o                '
	echo '8  .o8     `8 8        8    8                       8                     8        8              8                   '
	echo '8 .P`8   .oP` 8oPYo.   8      oPYo. .oPYo. .oPYo.  o8P o8 o    o .oPYo.   `Yooo.  o8P o    o .oPYo8 o8 .oPYo. .oPYo.  '
	echo '8.d` 8    `b. 8`  `8   8      8  `` 8oooo8 .oooo8   8   8 Y.  .P 8oooo8       `8   8  8    8 8    8  8 8    8 Yb..   '
	echo '8o`  8     :8 8.  .P   8    8 8     8.     8    8   8   8 `b..d` 8.            8   8  8    8 8    8  8 8    8   `Yb. '
	echo '`YooP` `YooP` `YooP`   `YooP` 8     `Yooo` `YooP8   8   8  `YP`  `Yooo`   `YooP`   8  `YooP` `YooP`  8 `YooP` `YooP. '
	echo ':.....::.....::.....::::.....:..:::::.....::.....:::..::..::...:::.....::::.....:::..::.....::.....::..:.....::.....:'
	echo ':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::'
	echo ':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::'
}

function diskenv {

    dialog --clear --backtitle "036 Creative Studios" --title "Entorno de Disco" \
		--menu "Seleccione su tipo de disco para la instalación \n" 15 50 4 \
        HDD "Disco Duro" \
		SSD-NVMe "Disco Sólido o NVMe" 2>"${DISKENVTEMP}"

	CHOICE=$(<"${DISKENVTEMP}")
	case $CHOICE in
		HDD) DISKENVIRONMENT="HDD"; disclaimer ;;
        SSD-NVMe) DISKENVIRONMENT="SSD"; disclaimer ;;
		*) clear; exit 0; ;;
	esac

}

function whichverify() {
	stat=$(which "$1" 2>&1)
	if [[ "$stat" =~ ^which:* ]]; then 
		return 1
	else
		return 0
	fi
}

function verify {

    ARCH=$(uname -m)
    OPERATING=$(uname -o)
	SELECTOR=""

	if [ "$OPERATING" != "GNU/Linux" ]; then
		clear
		echo 'ERROR: Este sistema no es GNU/Linux, saliendo'
		exit 1
	fi
	
	if [ -d /sys/firmware/efi ]; then
		echo "ready" &> /dev/null
	else
		clear
		echo "ERROR: Este script sólo trabaja en UEFI/EFI, considera cambiar tu PC o verifica tu BIOS"
		exit 1
	fi

    if [ "$ARCH" != "x86_64" ]; then
        echo "ERROR: Este script sólo se ejecuta en procesadores de x86_64."
        exit 1
    fi

    SELECTOR="pacman"
	whichverify "$SELECTOR"
	local res=$?

	if [ $res -eq 1 ]; then
		clear
		echo "ERROR: Arch Linux pacman no está disponible, ¿Acaso eso no es Arch Linux?"
		exit 1
	fi

    PING=$(ping -c 1 8.8.8.8 2>&1) 

    if [[ "$PING" =~ unreachable* ]]; then
		clear
		echo "ERROR: No tienes conexión a internet, por favor revisa e inténtalo de nuevo"
		exit 1
	fi

    echo "Actualizando repositorios de Arch..."
    pacman -Sy &> /dev/null

    SELECTOR="lsb_release"
	whichverify "$SELECTOR"
	local res=$?

	if [ $res -eq 1 ]; then
		echo "lsb_release no está disponible, instalando"
		pacman -S lsb-release --noconfirm &> /dev/null
	fi

	IS_ARCH=$(lsb_release -is)

	if [ "$IS_ARCH" != "Arch" ]; then
		clear
		echo "ERROR: Tu sistema operativo no es Arch Linux, saliendo"
		exit 1
	fi

	SELECTOR="fsck.f2fs"
	whichverify "$SELECTOR"
	local res=$?
	if [ $res -eq 1 ]; then
		echo "f2fs.tools no está disponible, instalando"
		pacman -S f2fs-tools --noconfirm &> /dev/null
	fi

	SELECTOR="dialog"
	whichverify "$SELECTOR"
	local res=$?

	if [ $res -eq 1 ]; then
		echo "dialog is no está disponible, instalando"
		pacman -S dialog --noconfirm &> /dev/null
	fi

    SELECTOR="pacstrap"
	whichverify "$SELECTOR"
	local res=$?

	if [ $res -eq 1 ]; then
		echo "pacstrap no está disponible, instalando"
		pacman -S arch-install-scripts --noconfirm &> /dev/null
	fi

	pacman -S ncurses --noconfirm &> /dev/null

	echo "Todo ok!"

	START=$(date +%s)
	CHARS="/-\|"

	while [[ $(($(date +%s) - START)) -lt 2 ]]; do
		for (( i=0; i<${#CHARS}; i++ )); do
			sleep 0.08
			echo -en "${CHARS:$i:1}" "\r"
		done
	done

}

function disclaimer {
	clear
	dialog --msgbox "CUIDADO!!!: Tu dispositivo debe estar vacío y formateado, formatear siempre mata tus datos, POR FAVOR haz una copia antes de continuar" 8 70

	if [ "$DISKENVIRONMENT" == "HDD" ] ; then
		dialog --msgbox "Antes de instalar, se recomienda que tu disco tenga esta tabla de particiones\n\n\
		GPT -> \n \
		1.	/dev/sdX1	EFI			200MB		fat32		esp\n\
		2.	/dev/sdX2	archlinux	>20GB		ext4		primary\n\
		3.	/dev/sdx3	linux-swap	2GB-4GB		swap		primary\n\n\

		GNU Parted script, es un ejemplo para un disco de 20GB\n\n \

		mklabel gpt \ \n \
		mkpart EFI fat32 1MiB 200MiB \ \n \
		set 1 esp on \ \n \
		mkpart ROOT ext4 200MiB 19.0GiB \ \n \
		mkpart SWAP linux-swap 19.0GiB 100% \ \n" 20 70

	elif [ "$DISKENVIRONMENT" == "SSD" ]; then
	dialog --msgbox "Antes de instalar, se recomienda que tu disco tenga esta tabla de particiones\n\n\
		GPT -> \n \
		1.	/dev/sdX1	EFI			200MB		fat32		esp\n\
		2.	/dev/sdX2	archlinux	>20GB		f2fs/ext4		primary\n\

		GNU Parted script, es un ejemplo para un disco de 20GB\n\n \

		mklabel gpt \ \n \
		mkpart EFI fat32 1MiB 200MiB \ \n \
		set 1 esp on \ \n \
		mkpart ROOT f2fs 200MiB 100% \ \n" 20 70
	fi
	diskmenu

}

function diskverify() {

	clear
	LABEL=$(blkid -o value -s PTTYPE "$1")
	EFI=""
	EFIORDER=""
	BLOCK=""

	if [ "$LABEL" == "dos" ]; then
		echo "ERROR: Este dispositivo tiene una tabla de tipo DOS (MBR), este script sólo trabaja con GPT"
		exit 1
	fi

	if [[ $1 =~ sd[[:alpha:]] ]]; then

		EFI=$(fdisk -l "$1" | sed -ne '/EFI/p')
		EFIORDER=$(echo "$EFI" | sed -ne '/[[:alpha:]]1/p' )

		if [ "$DISKENVIRONMENT" == "SSD" ]; then
			BLOCK=$(echo "$1" | cut -d "/" -f3)
			ROTATIONAL="$(cat /sys/block/"$BLOCK"/queue/rotational)"

			if  [ "$ROTATIONAL" == "1" ]; then
				echo "ERROR: Elegiste como SSD, pero este dispositivo es rotacional, si no es el caso, entonces este dispositivo es USB"
				exit 1
			fi

		elif [ "$DISKENVIRONMENT" == "HDD" ]; then
		
			BLOCK=$(echo "$1" | cut -d "/" -f3)
			ROTATIONAL="$(cat /sys/block/"$BLOCK"/queue/rotational)"

			if  [ "$ROTATIONAL" == "0" ]; then
				echo "ERROR: Elegiste como HDD, pero este dispositivo no es rotational, por favor verifica y ejecuta este script otra vez"
				exit 1
			fi
		fi

		if [ "$EFI" == "" ]; then
			echo "ERROR: Este dispositivo no tiene una partición EFI"
			exit 1
		fi
		if [ "$EFIORDER" == "" ]; then
			echo "ERROR: Este dispositivo tiene una partición EFI en otro lado que no sea $1 1"
			exit 1
		fi

		DISK=$1
		rootpartmenu

	elif [[ $1 =~ mmcblk[[:digit:]] ]]; then

		EFI=$(fdisk -l "$1" | sed -ne '/EFI/p')
		EFIORDER=$(echo "$EFI" | sed -ne '/p1/p' )

		if [ "$DISKENVIRONMENT" == "HDD" ]; then
			echo "ERROR: Elegiste como HDD, pero este dispositivo no es rotational, por favor verifica y ejecuta este script otra vez"
			exit 1
		fi

		if [ "$EFI" == "" ]; then
			echo "ERROR: Este dispositivo no tiene una partición EFI"
			exit 1
		fi
		if [ "$EFIORDER" == "" ]; then
			echo "ERROR: Este dispositivo tiene una partición EFI en otro lado que no sea $1 1"
			exit 1
		fi

		DISK=$1
		rootpartmenu

	elif [[ $1 =~ nvme[[:digit:]] ]]; then

		EFI=$(fdisk -l "$1" | sed -ne '/EFI/p')
		EFIORDER=$(echo "$EFI" | sed -ne '/p1/p' )

		if [ "$DISKENVIRONMENT" == "HDD" ]; then
			echo "ERROR: Elegiste como HDD, pero este dispositivo no es rotational, por favor verifica y ejecuta este script otra vez"
			exit 1
		fi

		if [ "$EFI" == "" ]; then
			echo "ERROR: Este dispositivo no tiene una partición EFI"
			exit 1
		fi
		if [ "$EFIORDER" == "" ]; then
			echo "ERROR: Este dispositivo tiene una partición EFI en otro lado que no sea $1 1"
			exit 1
		fi

		DISK=$1
		rootpartmenu

	fi

}

function diskmenu {

	clear
	COUNT=0
	BLOCK=()
	DIRTYDEVS=()

	DEVICES=$(find /dev/disk/by-path/ | sed 's/^\/dev\/disk\/by-path\///') # 3.0_high_speed_000000123AFF-0:0 ...

	for DEVICE in $DEVICES; do
		DIRTYDEVS[$COUNT]=$(readlink "/dev/disk/by-path/$DEVICE") # ../../sda ../../sda1 ... 
		COUNT=$(( COUNT + 1 ))
	done

	if [ $COUNT -eq 0 ]; then
		clear
		echo "FATAL ERROR: No hay discos disponibles en tu sistema, por favor verifica!!!"
		exit 1
	fi

	COUNT=0

	for DEV in "${DIRTYDEVS[@]}"; do	

		ABSOLUTEPARTS=$(echo "$DEV" | sed 's/^\.\.\/\.\.\//\/dev\//' | sed '/.*[[:alpha:]]$/d' | sed '/blk[[:digit:]]$/d' | sed '/nvme[[:digit:]]n[[:digit:]]$/d') #/dev/sda1 /dev/sda2 ...

		if [ "$ABSOLUTEPARTS" == "" ]; then
			BLOCK[$BLOCKCOUNT]=$(echo "$DEV" | sed 's/^\.\.\/\.\.\///') #sda sdb
			BLOCKCOUNT=$(( BLOCKCOUNT + 1 ))
		fi
		
	done

	COUNT=0
	MODEL=0
	DEVICE=0
	ARRAY=()

	for PART in "${BLOCK[@]}"; do
		DEVICE="/dev/$PART"
		BLOCKSTAT="${BLOCK[$COUNT]}"
		SIZE=$(lsblk -no SIZE /dev/"$PART" | head -1 | sed s/..//)
		MODEL="$(cat /sys/class/block/"$BLOCKSTAT"/device/model)" #KINGSTON 
		ARRAY+=("$DEVICE" "$MODEL $SIZE")
		COUNT=$(( COUNT + 1 ))
	done

		dialog --clear --backtitle "036 Creative Studios" --title "Elige un dispositivo" \
		--menu "Elige un dispositivo para instalar"\
		15 50 4 "${ARRAY[@]}" 2>"${DISKMENUTEMP}"

	CHOICE=$(<"${DISKMENUTEMP}")

	case $CHOICE in
		"$CHOICE") diskverify "$CHOICE";;
		*) clear; exit 0;;
	esac
}

function rootpartmenu {
	#Menu para seleccionar la particion de raiz de arch
	VERIFY=""
	TYPE=""
	COUNT=0
	COUNTMOUNT=0
	ISMOUNTED=0
	ROOTPARTS=()

	EFIPART=$(fdisk -l "$DISK" | sed -ne /EFI/p | cut -d " " -f1)

	if [[ $DISK =~ sd[[:alpha:]] ]]; then
		VERIFY=$(find "$DISK"* | sed '/[[:alpha:]]$/d')
	elif [[ $DISK =~ mmcblk[[:digit:]] ]]; then
		VERIFY=$(find "$DISK"* | sed '/k[[:digit:]]$/d')
	elif [[ $DISK =~ nvme[[:digit:]]n[[:digit:]] ]]; then
		VERIFY=$(find "$DISK"* | sed '/e[[:digit:]]n[[:digit:]]$/d')
	fi

	for PART in $VERIFY; do

	if [ "$PART" != "$EFIPART" ]; then

		ISMOUNTED=$(lsblk "$PART" | sed -ne '/\//p')
		if [ "$ISMOUNTED" != "" ]; then
			COUNTMOUNT=$(( COUNTMOUNT + 1 ))
		else
			ROOTPARTS+=("$PART" "$TYPE")
		fi
		COUNT=$((COUNT + 1))

	fi

	done

	if [ "$COUNTMOUNT" -eq $COUNT ]; then
		clear
		echo "ERROR: Todas las particiones de este dispositivo están montadas, por favor desmonta tu partición de elección"
		exit 1
	fi

	dialog --clear --backtitle "036 Creative Studios" --title "Partición de raíz" \
		--menu "Por favor seleccione su partición de raíz \n" 15 50 4 "${ROOTPARTS[@]}" 2>"${ROOTPARTMENUTEMP}"

	CHOICE=$(<"${ROOTPARTMENUTEMP}")
	case $CHOICE in
		"$CHOICE") ROOTPART="$CHOICE"; swapmenu "$CHOICE" ;;
		*) clear; exit 0; ;;
	esac
}

function swapmenu() {

	if [ "$1" == "" ]; then
		clear
		exit 0
	fi

	if [ $DISKENVIRONMENT == "HDD" ]; then

		VERIFY=""
		TYPE=""
		COUNT=0
		COUNTMOUNT=0
		ISMOUNTED=0
		SWAPPARTS=()

		if [[ $DISK =~ sd[[:alpha:]] ]]; then
			VERIFY=$(find "$DISK"* | sed '/[[:alpha:]]$/d')
		elif [[ $DISK =~ mmcblk[[:digit:]] ]]; then
			VERIFY=$(find "$DISK"* | sed '/k[[:digit:]]$/d')
		elif [[ $DISK =~ nvme[[:alpha:]] ]]; then
			VERIFY=$(find "$DISK"* | sed '/e[[:digit:]]$/d')
		fi

		for PART in $VERIFY; do

		if [ "$PART" != "$EFIPART" ]; then

			if [ "$PART" != "$ROOTPART" ]; then

				ISMOUNTED=$(lsblk "$PART" | sed -ne '/\//p')
				if [ "$ISMOUNTED" != "" ]; then
					COUNTMOUNT=$(( COUNTMOUNT + 1 ))
				else
					SWAPPARTS+=("$PART" "$TYPE")
				fi
					COUNT=$((COUNT + 1))
			fi

		fi

		done

		if [ "$COUNTMOUNT" -eq $COUNT ]; then
			clear
			echo "ERROR: Todas las particiones de este dispositivo están montadas, por favor desmonta tu partición de elección"
			exit 1
		fi

		dialog --clear --backtitle "036 Creative Studios" --title "Seleccione la partición de swap" \
			--menu "Por favor seleccione una partición de intercambio \n" 15 50 4 "${SWAPPARTS[@]}" 2>"${SWAPPARTMENUTEMP}"

		CHOICE=$(<"${SWAPPARTMENUTEMP}")
		case $CHOICE in
			"$CHOICE") SWAPPART="$CHOICE"; diskformat "$CHOICE" ;;
			*) clear; exit 0; ;;
		esac

	elif [ $DISKENVIRONMENT == "SSD" ]; then
		diskformat "pass"
	fi

}

function diskformat {

	if [ "$1" == "" ]; then
		clear
		exit 0
	fi

	if [ $DISKENVIRONMENT == "HDD" ]; then
		dialog --title "ZONA DE PELIBRO!!!" --backtitle "036 Creative Studios" \
			--yesno "Estas particiones se van a formatear ¿Continuar? \n$EFIPART (EFI) \n$ROOTPART (ROOT) \n$SWAPPART (SWAP)" 8 60
	elif [ $DISKENVIRONMENT == "SSD" ]; then
		dialog --title "ZONA DE PELIBRO!!!" --backtitle "036 Creative Studios" \
			--yesno "Estas particiones se van a formatear ¿Continuar? \n$EFIPART (EFI) \n$ROOTPART (ROOT)" 7 60
	fi

	clear
	response=$?

	if [ $response = 0 ]; then

		if [ $DISKENVIRONMENT == "HDD" ]; then

			echo -e "=============== FORMATEAR PARTICIONES DE RAIZ E INTERCAMBIO =============== \n" 

			mkfs.ext4 "$ROOTPART"
			mkswap "$SWAPPART"
			swapon "$SWAPPART"

			echo " "
			echo -e "=============== OK =============== \n" 
			read -r -p "Presione Enter para continuar..."
			clear
	
		elif [ $DISKENVIRONMENT == "SSD" ]; then

			echo -e "=============== FORMATEAR PARTICION DE RAIZ =============== \n" 

			mkfs.f2fs -f "$ROOTPART"

			echo " "
			echo -e "=============== OK =============== \n" 
			read -r -p "Presione Enter para continuar..."
			clear
	
		fi

		echo -e "=============== FORMATEAR EFI Y MONTARLO =============== \n" 

		mkfs.fat -F32 "$EFIPART"
		mount "$ROOTPART" /mnt
		mkdir /mnt/efi
		mount "$EFIPART" /mnt/efi

		echo " "
		echo -e "=============== OK =============== \n" 
		read -r -p "Presione Enter para continuar..."
		clear

		pacstraper


	elif [ $response -eq 1 ]; then
		clear
		exit 0
	else
		clear
		exit 0
	fi
	
}

function unmounter {
	clear

	if [ $DISKENVIRONMENT == "HDD" ]; then
		umount "$ROOTPART"
		swapoff "$SWAPPART"
	elif [ $DISKENVIRONMENT == "SSD" ]; then
		umount "$ROOTPART"
	fi
	echo "Particiones desmontadas de manera exitosa"
	exit 0
}

function pacstraper {

	echo -e "=============== PACSTRAP: INSTALAR LA BASE DE LINUX Y PAQUETES CORE  =============== \n" 
	
	pacstrap /mnt base linux linux-firmware nano sudo vi vim git wget \
	grub efibootmgr reflector os-prober rsync networkmanager neofetch \
	openssh arch-install-scripts screen unrar p7zip zsh dialog

	genfstab -U /mnt >> /mnt/etc/fstab

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "Presione Enter para continuar..."

	toggler

}

function toggler {

	cp "$0" /mnt/arch-setupper.sh
	arch-chroot /mnt ./arch-setupper.sh chroot $DISKENVIRONMENT

	if [ -f /mnt/arch-setupper.sh ]; then
        echo 'ERROR: Algo falló en el chroot, no se desmontarán los sistemas de archivos, así que puedes investigar.'
        echo 'Por favor desmonta tus particiones y reinicia este script'
    fi

	umount /mnt

	exit 0
}

function configurator {
	clear

	echo -e "=============== CONTRASEÑA DE ROOT PARA EL SISTEMA =============== \n" 

	passwd

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "Presione Enter para continuar..."

	clear

	echo -e "=============== CONFIGURAR GRUB =============== \n" 

	grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB
	grub-mkconfig -o /boot/grub/grub.cfg
	umount /efi

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "Presione Enter para continuar..."

	clear

	echo -e "=============== INICIAR NETWORKMANAGER Y SERVICIOS DE SSH =============== \n" 

	systemctl enable NetworkManager
	systemctl enable sshd
	sed -i 's/^#PermitRootLogin\s.*$/PermitRootLogin Yes/' \
	/etc/ssh/sshd_config &> /dev/null

	echo -e "=============== OK =============== \n" 
	read -r -p "Presione Enter para continuar..."

}

function hostnamer {

	clear
	dialog --title "Hostname" \
    --backtitle "036 Creative Studios" \
    --inputbox "Por favor escriba su hostname (ej: A036-arch)" 8 80 2>"$HOSTTEMP"

    RESPONSE=$?
    DATA=$(<$HOSTTEMP)

    case $RESPONSE in
    0) 
		echo "${DATA}" > /etc/hostname
		echo "127.0.1.1        ${DATA}" >> /etc/hosts
		return;;
    1) 
        clear; exit 0  
        return;;
    255) 
        clear; exit 0
        return;;
    esac
	
}

function localer {

	clear
	dialog --msgbox "America/Guayaquil es el timezone por defecto, si quieres cambiarlo por algún otro, aquí está la orden\n\n \
		ln -sf /usr/share/zoneinfo/REGION/CITY /etc/localtime" 9 50

	ln -sf /usr/share/zoneinfo/America/Guayaquil /etc/localtime
	hwclock --systohc

	dialog --clear --backtitle "036 Creative Studios" \
		--title "Locale" \
		--menu "Elige tu Locale, si quieres cambiar a otros, revisa el README dentro del GitHub de este proyecto" 12 50 4 \
		Spanish "es_ES" \
		English "en_US" 2>"${LOCALESTEMP}"

		menuitem=$(<"${LOCALESTEMP}")

		case $menuitem in
			Spanish) 
				clear
				sed -i 's/^#es_ES.UTF-8 UTF-8/es_ES.UTF-8 UTF-8/' /etc/locale.gen &> /dev/null
				locale-gen
				echo 'LANG="es_ES.UTF-8"' > /etc/locale.conf
				echo 'LC_TIME="es_ES.UTF-8"' >> /etc/locale.conf
				echo 'LANGUAGE="es_EC:es_ES:es"' >> /etc/locale.conf
				return;;
			English) 
				clear
				sed -i 's/^#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen &> /dev/null
				locale-gen
				echo 'LANG="en_US.UTF-8"' > /etc/locale.conf
				echo 'LC_TIME="en_US.UTF-8"' >> /etc/locale.conf
				echo 'LANGUAGE="es_US:en"' >> /etc/locale.conf
				return;;
			*) clear; exit 0;;
		esac
}

function newuser {

	clear
	echo -e "=============== AGREGAR UN USUARIO DE SUDO =============== \n" 
	
	read -r -p "Escribe tu nuevo usuasrio: " SUDOUSER
	useradd --create-home "$SUDOUSER"
	passwd "$SUDOUSER"
	usermod -aG wheel "$SUDOUSER"
	sed -i 's/^#.*%wheel ALL=(ALL) ALL$/%wheel ALL=(ALL) ALL/' /etc/sudoers &> /dev/null

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "Presione Enter para continuar..."
}

function swapper {

	clear
	echo -e "=============== SWAPPING =============== \n" 

	if [ $DISKENVIRONMENT == "HDD" ]; then

		echo "vm.swappiness=60" >> /etc/sysctl.d/99-sysctl.conf

	elif [ $DISKENVIRONMENT == "SSD" ]; then
		dd if=/dev/zero of=/swapfile bs=1M count=1024 status=progress
		chmod 600 /swapfile
		mkswap /swapfile
		swapon /swapfile
		echo "swapfile none swap defaults 0 0" >> /etc/fstab
		echo "vm.swappiness=1" >> /etc/sysctl.d/99-sysctl.conf
	fi


	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "Presione Enter para continuar..."

}

function xanmod {

	clear
	echo -e "=============== XANMOD KERNEL =============== \n" 
	
	sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf
	sed -i 's/^SigLevel    = Required DatabaseOptional$/SigLevel = PackageOptional/' \
		/etc/pacman.conf &> /dev/null
	echo "[kernel]" >> /etc/pacman.conf
	echo 'Server = https://repo.archlinuxrepo.dev/$arch/$repo' >> /etc/pacman.conf
	pacman -Syyu xanmod-kernel xanmod-kernel-headers --noconfirm
	pacman -R linux --noconfirm

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "Presione Enter para continuar..."
}

function graphical {

	clear
	dialog --clear --title "Entorno Gráfico" \
	--backtitle "036 Creative Studios" \
	--menu "Selecciona un GUI, estos son los más usados, Este script recomienda XFCE" 15 50 4 \
			XFCE "Xfce Desktop Environment" \
			GNOME "GNOME Desktop Environment" \
			KDE "KDE Desktop Environment" \
			XORG "Minimal xorg Desktop" \
			CUTEFISH "Cutefish Desktop (Beta)" \
			NOGUI "No Insstalar un GUI" 2>"${GRAPHICALTEMP}"

	menuitem=$(<"${GRAPHICALTEMP}")

		case $menuitem in
			XFCE) 

				clear
				echo -e "=============== XFCE =============== \n" 
	
				pacman -S xorg --noconfirm
				pacman -S xfce4 xfce4-goodies xfce4-terminal ttf-ubuntu-font-family \
					gtk-engines gtk-engine-murrine gnome-themes-standard \
					xdg-user-dirs ttf-dejavu gvfs xfce4-notifyd network-manager-applet \
					volumeicon firefox gdm grub-customizer nemo cinnamon-translations --noconfirm
				systemctl enable gdm

				echo " "
				echo -e "=============== OK =============== \n" 
				read -r -p "Presione Enter para continuar..."
				return;;

			GNOME) 

				clear
				echo -e "=============== GNOME =============== \n" 
				pacman -S xorg --noconfirm
				pacman -S gnome gdm gnome-themes-standard network-manager-applet \
					firefox grub-customizer nemo cinnamon-translations --noconfirm
				systemctl enable gdm

				echo " "
				echo -e "=============== OK =============== \n" 
				read -r -p "Presione Enter para continuar..."
				return;;

			KDE) 

				clear
				echo -e "=============== KDE =============== \n" 
				pacman -S xorg --noconfirm
				pacman -S plasma plasma-wayland-session kde-applications gnome-themes-standard network-manager-applet \
					firefox grub-customizer nemo cinnamon-translations --noconfirm
				systemctl enable sddm.service

				echo " "
				echo -e "=============== OK =============== \n" 
				read -r -p "Presione Enter para continuar..."
				return;;

			XORG) 

				clear
				echo -e "=============== XORG ONLY =============== \n" 
				pacman -S xorg --noconfirm

				echo " "
				echo -e "=============== OK =============== \n" 
				read -r -p "Presione Enter para continuar..."
				return;;

			CUTEFISH) 

				clear
				echo -e "=============== CUTEFISH =============== \n" 
				pacman -S xorg --noconfirm
				pacman -S curefish --noconfirm

				echo " "
				echo -e "=============== OK =============== \n" 
				read -r -p "Presione Enter para continuar..."
				return;;

			NOGUI) 
				return;;

			*) clear; exit 0;;
		esac
}

function drivers {

	clear
	dialog --title "Drivers de gráficos" \
	--backtitle "036 Creative Studios" \
	--menu "Elige tu controlador de GPU" 12 70 4 \
			Intel "Intel Graphics" \
			ATI "ATI Cards" \
			AMD "AMD Cards" \
			NVIDIA "NVIDIA Cards" \
			VMware "Si tu estás usando Arch Linux como guest" 2>"${DRIVERSTEMP}"

	menuitem=$(<"${DRIVERSTEMP}")

		case $menuitem in
			Intel) 

				clear
				echo -e "=============== INTEL =============== \n" 

				pacman -S xf86-video-intel intem-media-driver intel-media-sdk lib32-mesa --noconfirm

				echo " "
				echo -e "=============== OK =============== \n" 
				read -r -p "Presione Enter para continuar..."
				return;;

			ATI) 

				clear
				echo -e "=============== ATI =============== \n" 

				pacman -S xf86-video-ati --noconfirm
		
				echo " "
				echo -e "=============== OK =============== \n" 
				read -r -p "Presione Enter para continuar..."
				return;;

			AMD) 

				clear
				echo -e "=============== AMD =============== \n" 

				pacman -S xf86-video-amdgpu --noconfirm

				echo " "
				echo -e "=============== OK =============== \n" 
				read -r -p "Presione Enter para continuar..."
				return;;

			NVIDIA) 

				clear
				echo -e "=============== NVIDIA =============== \n" 

				pacman -S nvidia nvidia-utils --noconfirm

				echo " "
				echo -e "=============== OK =============== \n" 
				read -r -p "Presione Enter para continuar..."
				return;;

			VMware) 

				clear
				echo -e "=============== VMware =============== \n" 

				pacman -S gtkmm3 open-vm-tools xf86-input-vmmouse xf86-video-vmware --noconfirm
				systemctl enable vmtoolsd

				echo " "
				echo -e "=============== OK =============== \n" 
				read -r -p "Presione Enter para continuar..."
				return;;

			*) clear; exit 0;;
		esac

}

function aur {

	clear
	echo -e "=============== AUR (YAY PREGUNTA POR TU CONTRASEÑA, ESTATE ATENTO) ===============  \n" 

	pacman -S --needed base-devel fakeroot packer go --noconfirm

	sudo -u "$SUDOUSER" bash -c 'cd; git clone https://aur.archlinux.org/yay-bin.git'
	sudo -u "$SUDOUSER" bash -c 'cd; cd yay-bin; makepkg -si'
	sudo -u "$SUDOUSER" bash -c 'cd; rm -rf yay-bin'

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "Presione Enter para continuar..."

}

function ohmyzsh {

	clear
	echo -e "=============== OMZ =============== \n" 

	touch /home/"$SUDOUSER"/omz.sh

	echo '#!/bin/bash' > /home/"$SUDOUSER"/omz.sh
	echo 'sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"' >> /home/"$SUDOUSER"/omz.sh
	echo 'sed -i -e "s/ZSH_THEME=.*/ZSH_THEME=\"pmcgee\"/" .zshrc' >> /home/"$SUDOUSER"/omz.sh
	echo 'sed -i -e "/^source $ZSH.*/i ZSH_DISABLE_COMPFIX=true" .zshrc' >> /home/"$SUDOUSER"/omz.sh
	echo 'sudo ln -s "$HOME"/.zshrc /root/.zshrc' >> /home/"$SUDOUSER"/omz.sh
	echo 'sudo ln -s "$HOME"/.oh-my-zsh /root/.oh-my-zsh' >> /home/"$SUDOUSER"/omz.sh
	echo 'git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting' >> /home/"$SUDOUSER"/omz.sh
	echo 'git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions' >> /home/"$SUDOUSER"/omz.sh
	echo 'sed -i -e "s/plugins=(.*/plugins=(git zsh-syntax-highlighting zsh-autosuggestions)/" .zshrc' >> /home/"$SUDOUSER"/omz.sh

	chown "$SUDOUSER" /home/"$SUDOUSER"/omz.sh

	echo "Hemos creado un script llamado omz.sh en tu carpeta de home, después de reiniciar, usa chmod +x omz.sh"

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "Presione Enter para continuar..."

}

function optimizations {

	clear
	echo -e "=============== OPTIMIZACIONES =============== \n" 

	sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=".*"/GRUB_CMDLINE_LINUX_DEFAULT="loglevel=0 nowatchdog"/' \
		/etc/default/grub &> /dev/null

	grub-mkconfig -o /boot/grub/grub.cfg

	systemctl mask lvm2-monitor

	touch /etc/modprobe.d/blacklists.conf

	echo 'blacklist iTCO_wdt' > /etc/modprobe.d/blacklists.conf
	echo 'blacklist joydev' >> /etc/modprobe.d/blacklists.conf
	echo 'blacklist mousedev' >> /etc/modprobe.d/blacklists.conf
	echo 'blacklist mac_hid' >> /etc/modprobe.d/blacklists.conf

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "Presione Enter para continuar..."

}

function software {

	dialog --title "Más Sofware!!" --backtitle "036 Creative Studios" \
		--yesno "Este script tiene un pequeño pack de software, ¿Te gusta?\n \
			-> baobab \n \
			-> ntfs-3g \n \
			-> exfatprogs \n \
			-> exfat-utils \n \
			-> xarchiver \n \
			-> gparted \n \
			-> wine \n \
			-> exe-thumbnailer \n \
			-> brave \n \
			-> github-desktop \n \
			-> playonlinux \n \
			-> discord \n \
			-> visual-studio-code-bin \n \
			-> zerotier-gui-git \n \
			-> notion-app \n \
			-> teamviewer \n \
			-> numix-gtk-theme-git\n \
			-> numix-icon-theme \n \
			-> telegram-desktop \n \
			-> preload " 26 65
	clear
	response=$?

	if [ $response -eq 0 ]; then
	
	clear
	echo -e "=============== SOFTWARE =============== \n" 

	touch /home/"$SUDOUSER"/software.sh

	echo allowed_users=anybody > /etc/X11/Xwrapper.config

	echo '!#/bin/bash' > /home/"$SUDOUSER"/software.sh
	echo 'yay -S baobab ntfs-3g exfatprogs \' >> /home/"$SUDOUSER"/software.sh
	echo 'xarchiver gparted wine playonlinux xrdp \' >> /home/"$SUDOUSER"/software.sh
	echo 'discord visual-studio-code-bin \' >> /home/"$SUDOUSER"/software.sh
	echo 'notion-app teamviewer telegram-desktop preload \' >> /home/"$SUDOUSER"/software.sh
	echo 'brave-bin exe-thumbnailer github-desktop-bin \' >> /home/"$SUDOUSER"/software.sh
	echo 'wps-office xorgxrdp gobject-introspection libdbusmenu-gtk2 \' >> /home/"$SUDOUSER"/software.sh
	echo 'libdbusmenu-glib libdbusmenu-gtk3 appmenu-gtk-module numix-gtk-theme \' >> /home/"$SUDOUSER"/software.sh
	echo 'numix-icon-theme-git numix-circle-icon-theme-git' >> /home/"$SUDOUSER"/software.sh
	echo 'systemctl enable xrdp' >> /home/"$SUDOUSER"/software.sh
	echo 'systemctl enable xrdp-sesman' >> /home/"$SUDOUSER"/software.sh
	echo 'systemctl enable preload' >> /home/"$SUDOUSER"/software.sh
		
	chown "$SUDOUSER" /home/"$SUDOUSER"/software.sh

	echo "Hemos creado un script llamado software.sh en tu carpeta de home, después de reiniciar, usa chmod +x software.sh"

	echo " "
	echo -e "=============== OK =============== \n" 
	read -r -p "Presione Enter para continuar..."


	elif [ $response -eq 1 ]; then
		clear
		return
	else
		clear
		exit 0
	fi

}

function finisher {

	clear
	dialog --msgbox 'LISTO!!!, Tu PC ya instalo de manera correcta a Arch Linux, si hubo errores, repórtalo en 036bootstrap / GitHub' 7 50
	rm -f /arch-setupper.sh &> /dev/null
	exit
	clear
	echo "Por favor reinicia y quita tu medio de live"

}

if [ "$1" == "chroot" ]; then
	DISKENVIRONMENT=$2
	corechroot
else
	corelive
fi

[ -f $DISKENVTEMP ] && rm $DISKENVTEMP 
[ -f $DISKMENUTEMP ] && rm $DISKMENUTEMP 
[ -f $ROOTPARTMENUTEMP ] && rm $ROOTPARTMENUTEMP
[ -f $SWAPPARTMENUTEMP ] && rm $SWAPPARTMENUTEMP
[ -f $LOCALESTEMP ] && rm $LOCALESTEMP
[ -f $HOSTTEMP ] && rm $HOSTTEMP
[ -f $GRAPHICALTEMP ] && rm $GRAPHICALTEMP
[ -f $DRIVERSTEMP ] && rm $DRIVERSTEMP